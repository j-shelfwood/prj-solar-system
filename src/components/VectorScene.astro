---
import type { Vector } from "../domain/math/Standard";

interface Props {
  // Core vectors
  v1: Vector;
  v2: Vector;
  v3: Vector;

  // Camera configuration
  cameraAlpha?: number;
  cameraBeta?: number;
  cameraRadius?: number;
  cameraMinZoom?: number;
  cameraMaxZoom?: number;

  // Scene configuration
  gridSize?: number;
  gridSubdivisions?: number;
  axisLength?: number;
  axisRadius?: number;

  // Vector appearance
  vectorRadius?: number;
  arrowHeight?: number;
  arrowDiameter?: number;
  vectorColors?: [string, string, string]; // [v1, v2, v3]

  // Lighting
  lightIntensity?: number;
  ambientLight?: number;
}

const {
  v1,
  v2,
  v3,
  // Camera defaults
  cameraAlpha = -Math.PI / 2, // Side view
  cameraBeta = Math.PI / 6, // 30Â° elevation
  cameraRadius = 25,
  cameraMinZoom = 10,
  cameraMaxZoom = 50,
  // Scene defaults
  gridSize = 20,
  gridSubdivisions = 10,
  axisLength = 10,
  axisRadius = 0.02,
  // Vector defaults
  vectorRadius = 0.03,
  arrowHeight = 0.5,
  arrowDiameter = 0.4,
  vectorColors = ["#ff0000", "#0000ff", "#00ff00"],
  // Lighting
  lightIntensity = 0.7,
  ambientLight = 0.25,
} = Astro.props;
---

<vector-scene
  data-v1={v1.toJSON()}
  data-v2={v2.toJSON()}
  data-v3={v3.toJSON()}
  data-config={JSON.stringify({
    camera: { alpha: cameraAlpha, beta: cameraBeta, radius: cameraRadius },
    scene: { gridSize, gridSubdivisions, axisLength, axisRadius },
    vectors: { vectorRadius, arrowHeight, arrowDiameter, vectorColors },
    lighting: { lightIntensity, ambientLight },
    zoom: { min: cameraMinZoom, max: cameraMaxZoom },
  })}
  class="block w-full h-full"
>
  <canvas id="renderCanvas" class="block w-full h-full touch-none"></canvas>
</vector-scene>

<style>
  canvas {
    outline: none;
    -webkit-tap-highlight-color: transparent;
  }
</style>

<script>
  import { Vector } from "../domain/math/Standard";
  import { BaseScene } from "./base/BaseScene";
  import {
    Vector3,
    Color3,
    StandardMaterial,
    MeshBuilder,
    Scene,
    Mesh,
    HemisphericLight,
  } from "@babylonjs/core";

  class VectorSceneElement extends BaseScene {
    private settings: {
      camera: { alpha: number; beta: number; radius: number };
      scene: {
        gridSize: number;
        gridSubdivisions: number;
        axisLength: number;
        axisRadius: number;
      };
      vectors: {
        vectorRadius: number;
        arrowHeight: number;
        arrowDiameter: number;
        vectorColors: string[];
      };
      lighting: { lightIntensity: number; ambientLight: number };
      zoom: { min: number; max: number };
    };

    constructor() {
      super();
      const config = JSON.parse(this.dataset.config || "{}");
      this.settings = {
        camera: {
          alpha: -Math.PI / 2,
          beta: Math.PI / 6,
          radius: 25,
          ...config.camera,
        },
        scene: {
          gridSize: 20,
          gridSubdivisions: 10,
          axisLength: 10,
          axisRadius: 0.02,
          ...config.scene,
        },
        vectors: {
          vectorRadius: 0.03,
          arrowHeight: 0.5,
          arrowDiameter: 0.4,
          vectorColors: [],
          ...config.vectors,
        },
        lighting: {
          lightIntensity: 0.7,
          ambientLight: 0.25,
          ...config.lighting,
        },
        zoom: { min: 10, max: 50, ...config.zoom },
      };
    }

    protected setupScene() {
      if (!this.scene || !this.camera) return;

      // Set up camera
      this.camera.alpha = this.settings.camera.alpha;
      this.camera.beta = this.settings.camera.beta;
      this.camera.radius = this.settings.camera.radius;
      this.camera.lowerRadiusLimit = this.settings.zoom.min;
      this.camera.upperRadiusLimit = this.settings.zoom.max;

      // Lighting
      new HemisphericLight(
        "light",
        new Vector3(0, 1, 0),
        this.scene
      ).intensity = this.settings.lighting.lightIntensity;

      this.scene.ambientColor = new Color3(
        this.settings.lighting.ambientLight,
        this.settings.lighting.ambientLight,
        this.settings.lighting.ambientLight
      );

      // Environment
      this.createGrid();
      this.createAxes();

      // Vectors
      this.createVector(
        Vector.parse(this.dataset.v1 || ""),
        Color3.FromHexString(this.settings.vectors.vectorColors[0])
      );
      this.createVector(
        Vector.parse(this.dataset.v2 || ""),
        Color3.FromHexString(this.settings.vectors.vectorColors[1])
      );
      this.createVector(
        Vector.parse(this.dataset.v3 || ""),
        Color3.FromHexString(this.settings.vectors.vectorColors[2])
      );
    }

    private createVector(vector: Vector, color: Color3) {
      if (!this.scene) return;

      const end = new Vector3(vector.x, vector.y, vector.z);
      const line = MeshBuilder.CreateTube(
        "vector",
        {
          path: [Vector3.Zero(), end],
          radius: this.settings.vectors.vectorRadius,
        },
        this.scene
      );

      const material = new StandardMaterial("vectorMat", this.scene);
      material.emissiveColor = color;
      line.material = material;

      this.createArrowHead(end, color);
    }

    private createArrowHead(position: Vector3, color: Color3) {
      if (!this.scene) return;

      const arrow = MeshBuilder.CreateCylinder(
        "arrowHead",
        {
          height: this.settings.vectors.arrowHeight,
          diameterTop: 0,
          diameterBottom: this.settings.vectors.arrowDiameter,
        },
        this.scene
      );

      arrow.position = position;
      arrow.material = new StandardMaterial("arrowMat", this.scene);
      (arrow.material as StandardMaterial).emissiveColor = color;
    }

    private createGrid() {
      if (!this.scene) return;

      const grid = MeshBuilder.CreateGround(
        "grid",
        {
          width: this.settings.scene.gridSize,
          height: this.settings.scene.gridSize,
          subdivisions: this.settings.scene.gridSubdivisions,
        },
        this.scene
      );

      const material = new StandardMaterial("gridMat", this.scene);
      material.wireframe = true;
      material.alpha = 0.3;
      material.emissiveColor = new Color3(0.2, 0.2, 0.2);
      grid.material = material;
      grid.position.y = -0.01;
    }

    private createAxes() {
      if (!this.scene) return;

      const axes = [
        {
          end: new Vector3(this.settings.scene.axisLength, 0, 0),
          color: Color3.Red(),
        },
        {
          end: new Vector3(0, this.settings.scene.axisLength, 0),
          color: Color3.Green(),
        },
        {
          end: new Vector3(0, 0, this.settings.scene.axisLength),
          color: Color3.Blue(),
        },
      ];

      axes.forEach(({ end, color }) => {
        const line = MeshBuilder.CreateTube(
          "axis",
          {
            path: [Vector3.Zero(), end],
            radius: this.settings.scene.axisRadius,
          },
          this.scene
        );

        const material = new StandardMaterial("axisMat", this.scene);
        material.emissiveColor = color;
        line.material = material;
      });
    }
  }

  customElements.define("vector-scene", VectorSceneElement);
</script>
